/**
 *  @author kiwi
 *  @date 2022.05.16
 *
 *  ideas and visualization modules for the replay feature at 17Lands. mostly
 *  wishful thinking and having fun recreating the Arena UI
 */

let font
let instructions
let debugCorner /* output debug text in the bottom left corner of the canvas */

let svgTest

function preload() {
    font = loadFont('data/consola.ttf')
    svgTest = loadImage('u.svg')
}


function setup() {
    let cnv = createCanvas(600, 300)
    cnv.parent('#canvas')
    colorMode(HSB, 360, 100, 100, 100)
    textFont(font, 14)

    /* initialize instruction div */
    instructions = select('#ins')
    instructions.html(`<pre>
        numpad 1 → freeze sketch</pre>`)

    debugCorner = new CanvasDebugCorner(5)
}


function draw() {
    background(234, 34, 24)

    // svgTest.resize(200, 0)
    // stroke(90, 100, 100)
    // strokeWeight(3)
    // point(width/2, height/2)
    // point(64, 64)
    // image(svgTest, 0, 0)
    black(drawingContext)

    /* debugCorner needs to be last so its z-index is highest */
    debugCorner.setText(`frameCount: ${frameCount}`, 2)
    debugCorner.setText(`fps: ${frameRate().toFixed(0)}`, 1)
    debugCorner.show()
}


/**
 * used professorcloud.com/svg-to-canvas (works in edge but not in chrome!) to
 * convert 32x32 size .svg from mana font to html5 canvas commands
 * @param ctx
 */
function black(ctx) {
    ctx.save();
    ctx.beginPath();
    ctx.moveTo(0,0);
    ctx.lineTo(32,0);
    ctx.lineTo(32,32);
    ctx.lineTo(0,32);
    ctx.closePath();
    ctx.clip();
    ctx.translate(0,0);
    ctx.translate(0,0);
    ctx.scale(1,1);
    ctx.translate(0,0);
    ctx.strokeStyle = 'rgba(0,0,0,0)';
    ctx.lineCap = 'butt';
    ctx.lineJoin = 'miter';
    ctx.miterLimit = 4;
    ctx.save();
    ctx.restore();
    ctx.save();
    ctx.fillStyle = "#bbb";
    ctx.beginPath();
    ctx.moveTo(31.406,15.477);
    ctx.bezierCurveTo(31.406,17.566,30.645999999999997,18.990000000000002,29.127,19.75);
    ctx.bezierCurveTo(28.683,19.972,27.291,20.272,24.948999999999998,20.652);
    ctx.bezierCurveTo(23.43,20.906000000000002,22.671,21.491,22.671,22.408);
    ctx.lineTo(22.671,26.253);
    ctx.bezierCurveTo(22.671,26.413,22.718,26.902,22.813,27.725);
    ctx.lineTo(22.956,29.245);
    ctx.bezierCurveTo(22.956,29.720000000000002,22.845,30.496000000000002,22.623,31.572000000000003);
    ctx.bezierCurveTo(22.022000000000002,31.698000000000004,21.325000000000003,31.840000000000003,20.534000000000002,32);
    ctx.bezierCurveTo(20.28,31.049,20.154000000000003,30.401,20.154000000000003,30.052);
    ctx.bezierCurveTo(20.154000000000003,29.895,20.194000000000003,29.656,20.273000000000003,29.34);
    ctx.bezierCurveTo(20.351000000000003,29.024,20.393000000000004,28.787,20.393000000000004,28.627);
    ctx.bezierCurveTo(20.393000000000004,28.407,20.196000000000005,27.788999999999998,19.803000000000004,26.776999999999997);
    ctx.lineTo(19.067000000000004,26.776999999999997);
    ctx.bezierCurveTo(18.969000000000005,26.935,18.937000000000005,27.141,18.969000000000005,27.394);
    ctx.bezierCurveTo(19.095000000000006,27.932,19.143000000000004,28.391,19.112000000000005,28.770999999999997);
    ctx.bezierCurveTo(18.574000000000005,29.150999999999996,17.830000000000005,29.656999999999996,16.880000000000006,30.289999999999996);
    ctx.bezierCurveTo(16.658000000000005,30.226999999999997,16.580000000000005,30.194999999999997,16.642000000000007,30.194999999999997);
    ctx.lineTo(16.642000000000007,26.823999999999998);
    ctx.bezierCurveTo(16.580000000000005,26.666999999999998,16.421000000000006,26.604,16.167000000000005,26.633999999999997);
    ctx.lineTo(15.598000000000006,26.633999999999997);
    ctx.lineTo(15.029000000000007,31.095999999999997);
    ctx.bezierCurveTo(14.585000000000006,31.127999999999997,14.048000000000007,31.127999999999997,13.415000000000006,31.095999999999997);
    ctx.bezierCurveTo(13.192000000000005,30.051999999999996,12.798000000000005,28.501999999999995,12.228000000000007,26.443999999999996);
    ctx.lineTo(11.848000000000006,26.443999999999996);
    ctx.bezierCurveTo(11.499000000000006,27.552999999999997,11.310000000000006,28.154999999999994,11.278000000000006,28.248999999999995);
    ctx.bezierCurveTo(11.278000000000006,28.374999999999996,11.317000000000005,28.619999999999994,11.397000000000006,28.983999999999995);
    ctx.bezierCurveTo(11.475000000000005,29.347999999999995,11.515000000000006,29.592999999999996,11.515000000000006,29.719999999999995);
    ctx.bezierCurveTo(11.515000000000006,29.814999999999994,11.483000000000006,30.051999999999996,11.420000000000005,30.431999999999995);
    ctx.lineTo(11.277000000000005,31.570999999999994);
    ctx.bezierCurveTo(11.213000000000005,31.633999999999993,11.134000000000004,31.665999999999993,11.040000000000004,31.665999999999993);
    ctx.bezierCurveTo(10.091000000000005,31.665999999999993,9.457000000000004,31.428999999999995,9.141000000000005,30.954999999999995);
    ctx.bezierCurveTo(8.825000000000005,30.479999999999993,8.697000000000005,29.814999999999994,8.761000000000005,28.959999999999994);
    ctx.lineTo(9.141000000000005,23.263999999999996);
    ctx.bezierCurveTo(9.141000000000005,23.168999999999997,9.172000000000006,23.041999999999994,9.236000000000006,22.883999999999997);
    ctx.bezierCurveTo(9.298000000000005,22.725999999999996,9.331000000000007,22.615,9.331000000000007,22.551999999999996);
    ctx.bezierCurveTo(9.331000000000007,22.297999999999995,9.062000000000006,21.791999999999994,8.524000000000006,21.031999999999996);
    ctx.bezierCurveTo(8.430000000000007,21.000999999999998,7.938000000000006,20.888999999999996,7.053000000000006,20.698999999999998);
    ctx.bezierCurveTo(6.5140000000000065,20.572999999999997,5.454000000000006,20.351,3.872000000000006,20.034);
    ctx.bezierCurveTo(1.687000000000006,19.624,0.5960000000000063,17.866999999999997,0.5960000000000063,14.764999999999999);
    ctx.bezierCurveTo(0.5960000000000063,10.143999999999998,2.496000000000006,6.2989999999999995,6.294000000000007,3.228999999999999);
    ctx.bezierCurveTo(6.451000000000007,4.084,6.721000000000006,5.2219999999999995,7.100000000000007,6.646999999999999);
    ctx.bezierCurveTo(7.385000000000007,6.710999999999999,8.003000000000007,6.853,8.952000000000007,7.073999999999999);
    ctx.bezierCurveTo(9.143000000000008,7.137999999999999,10.108000000000008,7.485999999999999,11.849000000000007,8.119);
    ctx.bezierCurveTo(10.962000000000007,7.5809999999999995,9.807000000000007,6.711,8.383000000000006,5.507999999999999);
    ctx.bezierCurveTo(7.845000000000006,4.874999999999999,7.576000000000006,3.815999999999999,7.576000000000006,2.327999999999999);
    ctx.bezierCurveTo(7.576000000000006,1.979999999999999,8.178000000000006,1.567999999999999,9.381000000000006,1.091999999999999);
    ctx.bezierCurveTo(10.456000000000005,0.6489999999999989,11.264000000000006,0.396999999999999,11.802000000000005,0.33299999999999896);
    ctx.bezierCurveTo(13.511000000000005,0.11299999999999896,14.824000000000005,-1.0547118733938987e-15,15.743000000000006,-1.0547118733938987e-15);
    ctx.bezierCurveTo(19.698000000000008,-1.0547118733938987e-15,22.894000000000005,1.013999999999999,25.331000000000003,3.0389999999999993);
    ctx.bezierCurveTo(24.541000000000004,3.9569999999999994,23.179000000000002,4.936999999999999,21.249000000000002,5.981);
    ctx.bezierCurveTo(22.009000000000004,6.013,23.117,5.713,24.572000000000003,5.079);
    ctx.bezierCurveTo(26.027,4.447,26.645000000000003,4.13,26.424000000000003,4.13);
    ctx.bezierCurveTo(26.677000000000003,4.13,27.184000000000005,4.637,27.944000000000003,5.649);
    ctx.bezierCurveTo(28.513,6.408,28.972,7.09,29.321,7.6899999999999995);
    ctx.bezierCurveTo(30.333000000000002,9.495,31.013,11.440999999999999,31.363,13.529);
    ctx.bezierCurveTo(31.363,14.258,31.378,14.78,31.41,15.096);
    ctx.lineTo(31.41,15.476);
    ctx.lineTo(31.411,15.476);
    ctx.closePath();
    ctx.moveTo(13.224,16.332);
    ctx.bezierCurveTo(13.224,14.971,12.63,13.681000000000001,11.444,12.462);
    ctx.bezierCurveTo(10.258000000000001,11.242999999999999,8.983,10.635,7.622000000000001,10.635);
    ctx.bezierCurveTo(6.4190000000000005,10.635,5.359000000000001,11.145,4.441000000000001,12.164);
    ctx.bezierCurveTo(3.5230000000000006,13.183,3.064000000000001,14.315,3.064000000000001,15.556999999999999);
    ctx.bezierCurveTo(3.064000000000001,16.639,3.586000000000001,17.340999999999998,4.631000000000001,17.659);
    ctx.bezierCurveTo(5.296000000000001,17.851,6.2280000000000015,17.962,7.432000000000001,17.993);
    ctx.lineTo(10.043000000000001,17.993);
    ctx.bezierCurveTo(12.162,18.025,13.224,17.471,13.224,16.331999999999997);
    ctx.closePath();
    ctx.moveTo(18.398,22.219);
    ctx.lineTo(18.398,20.747);
    ctx.bezierCurveTo(18.177,20.336,17.955,19.909,17.733999999999998,19.465);
    ctx.bezierCurveTo(17.543999999999997,18.831,17.195999999999998,17.945,16.689,16.806);
    ctx.lineTo(16.166,22.361);
    ctx.bezierCurveTo(16.166,22.805,16.071,23.026,15.881,23.026);
    ctx.bezierCurveTo(15.755,23.026,15.66,22.995,15.596,22.932);
    ctx.bezierCurveTo(15.374,19.576999999999998,15.263,18.121,15.263,18.563);
    ctx.lineTo(15.263,16.901999999999997);
    ctx.bezierCurveTo(15.199,16.805999999999997,15.121,16.758999999999997,15.026,16.758999999999997);
    ctx.bezierCurveTo(13.949,17.867999999999995,13.411999999999999,19.655999999999995,13.411999999999999,22.123999999999995);
    ctx.bezierCurveTo(13.411999999999999,23.484999999999996,13.536999999999999,24.323999999999995,13.790999999999999,24.640999999999995);
    ctx.bezierCurveTo(14.044999999999998,24.577999999999996,14.328999999999999,24.466999999999995,14.645999999999999,24.308999999999994);
    ctx.bezierCurveTo(14.771999999999998,24.244999999999994,15.136,24.213999999999995,15.738999999999999,24.213999999999995);
    ctx.bezierCurveTo(16.339,24.213999999999995,17.067999999999998,24.403999999999996,17.921999999999997,24.782999999999994);
    ctx.bezierCurveTo(18.237999999999996,24.782999999999994,18.397,23.928999999999995,18.397,22.220999999999993);
    ctx.closePath();
    ctx.moveTo(29.127,15.604);
    ctx.bezierCurveTo(29.127,14.328999999999999,28.651999999999997,13.190999999999999,27.703,12.187999999999999);
    ctx.bezierCurveTo(26.754,11.184999999999999,25.661,10.683,24.428,10.683);
    ctx.bezierCurveTo(23.099,10.683,21.856,11.291,20.701,12.51);
    ctx.bezierCurveTo(19.546,13.729,18.968,15.001999999999999,18.968,16.332);
    ctx.bezierCurveTo(18.968,17.44,19.506,17.993000000000002,20.582,17.993000000000002);
    ctx.lineTo(26.041,17.993000000000002);
    ctx.bezierCurveTo(28.098,17.962000000000003,29.127,17.165000000000003,29.127,15.604000000000003);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.restore();
    ctx.restore();
}


function wastes(ctx) {
    ctx.save();
    ctx.beginPath();
    ctx.moveTo(0,0);
    ctx.lineTo(32,0);
    ctx.lineTo(32,32);
    ctx.lineTo(0,32);
    ctx.closePath();
    ctx.clip();
    ctx.translate(0,0);
    ctx.translate(0,0);
    ctx.scale(1,1);
    ctx.translate(0,0);
    ctx.strokeStyle = 'rgba(0,0,0,0)';
    ctx.lineCap = 'butt';
    ctx.lineJoin = 'miter';
    ctx.miterLimit = 4;
    ctx.save();
    ctx.restore();
    ctx.save();
    ctx.fillStyle = "#444444";
    ctx.beginPath();
    ctx.moveTo(13.407,5.933);
    ctx.bezierCurveTo(14.42,4.499,15.083,2.8619999999999997,15.994,1.3639999999999999);
    ctx.bezierCurveTo(16.874,2.811,17.512999999999998,4.394,18.477,5.79);
    ctx.bezierCurveTo(20.529,8.823,23.171,11.46,26.204,13.512);
    ctx.bezierCurveTo(27.605,14.479000000000001,29.191000000000003,15.120000000000001,30.638,16.007);
    ctx.bezierCurveTo(29.182000000000002,16.875,27.6,17.519000000000002,26.202,18.485000000000003);
    ctx.bezierCurveTo(23.121000000000002,20.570000000000004,20.442,23.256000000000004,18.381,26.354000000000003);
    ctx.bezierCurveTo(17.462,27.711000000000002,16.845,29.240000000000002,15.992,30.633000000000003);
    ctx.bezierCurveTo(15.110000000000001,29.189000000000004,14.471,27.605000000000004,13.506,26.209000000000003);
    ctx.bezierCurveTo(11.452,23.179000000000002,8.818999999999999,20.531000000000002,5.781000000000001,18.485000000000003);
    ctx.bezierCurveTo(4.385000000000001,17.523000000000003,2.8040000000000007,16.882,1.362000000000001,15.992000000000003);
    ctx.bezierCurveTo(2.862000000000001,15.093000000000004,4.491000000000001,14.423000000000002,5.926000000000001,13.417000000000002);
    ctx.bezierCurveTo(8.850000000000001,11.411000000000001,11.396,8.851000000000003,13.407,5.931000000000002);
    ctx.closePath();
    ctx.moveTo(7.373,15.999);
    ctx.bezierCurveTo(10.731,18.333000000000002,13.663,21.257,15.990000000000002,24.62);
    ctx.bezierCurveTo(18.329,21.264000000000003,21.246000000000002,18.32,24.621000000000002,16.003);
    ctx.bezierCurveTo(21.255000000000003,13.669,18.326,10.74,15.990000000000002,7.379);
    ctx.bezierCurveTo(13.656000000000002,10.735,10.734000000000002,13.667,7.373000000000001,15.998);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.restore();
    ctx.restore();
};


function keyPressed() {
    /* stop sketch */
    if (keyCode === 97) { /* numpad 1 */
        noLoop()
        instructions.html(`<pre>
            sketch stopped</pre>`)
    }
}


/** 🧹 shows debugging info using text() 🧹 */
class CanvasDebugCorner {
    constructor(lines) {
        this.size = lines
        this.debugMsgList = [] /* initialize all elements to empty string */
        for (let i in lines)
            this.debugMsgList[i] = ''
    }

    setText(text, index) {
        if (index >= this.size) {
            this.debugMsgList[0] = `${index} ← index>${this.size} not supported`
        } else this.debugMsgList[index] = text
    }

    show() {
        textFont(font, 14)
        strokeWeight(1)

        const LEFT_MARGIN = 10
        const DEBUG_Y_OFFSET = height - 10 /* floor of debug corner */
        const LINE_SPACING = 2
        const LINE_HEIGHT = textAscent() + textDescent() + LINE_SPACING
        fill(0, 0, 100, 100) /* white */
        strokeWeight(0)

        for (let index in this.debugMsgList) {
            const msg = this.debugMsgList[index]
            text(msg, LEFT_MARGIN, DEBUG_Y_OFFSET - LINE_HEIGHT * index)
        }
    }
}